<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:Converters="clr-namespace:CMiX.Core.Presentation.ValueConverters"
                    xmlns:Controls="clr-namespace:CMiX.Core.Presentation.Controls">

    <Converters:ComponentVisibilityConverter x:Key="ComponentVisibility"/>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
                            Margin="0,0,0,0"
                            StrokeThickness="5"
                            Stroke="Black"
                            StrokeDashArray="1 2"
                            Opacity="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center"  >
                        <Path x:Name="ExpandPath" 
                              Data="{DynamicResource TreeArrow}" 
                              Fill="{DynamicResource HighLightColor}" 
                              StrokeThickness="1"
                              Stroke="{DynamicResource HighLightColor}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="4" CenterX="4"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource SuperHighLightColor}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource SuperHighLightColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource SuperHighLightColor}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource SuperHighLightColor}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource SuperHighLightColor}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource SuperHighLightColor}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="TreeViewDefault" TargetType="{x:Type TreeView}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border Name="Border" Background="{DynamicResource HighDarkerColor}">
                        <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="TreeViewItemDefault" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource TextBase}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <Converters:LeftMarginMultiplierConverter Length="19" x:Key="lengthConverter" />
                    </ControlTemplate.Resources>
                    <StackPanel>
                        <Border Name="Bd">
                            
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="BorderThickness" Value="0, 0, 0, 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource SuperHighDarkerColor}"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource DarkerColor}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                                    <ei:ChangePropertyAction PropertyName="IsSelected" Value="true" TargetObject="{Binding}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                            <DockPanel>
                                
                                <Border 
                                    DockPanel.Dock="Left" 
                                    Height="30" 
                                    Width="30" 
                                    BorderBrush="{DynamicResource SuperHighDarkerColor}" 
                                    
                                    BorderThickness="0, 0, 1, 0">
                                    <!--IsChecked="{Binding Path=DataContext.IsVisible, RelativeSource={RelativeSource TemplatedParent}}"-->
                                    <Button 
                                        Padding="4" 
                                        Margin="4"
                                        Command="{Binding Path=Visibility.SetVisibilityCommand}"
                                        CommandParameter="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <Border
                                                                x:Name="border"
                                                                Margin="0"
                                                                Opacity="0.6"
                                                                Padding="1"
                                                                Background="Transparent"
                                                                SnapsToDevicePixels="True">
                                                                <Image x:Name="image" Source="{DynamicResource Visible}"/>
                                                            </Border>
                                                            <ControlTemplate.Triggers>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.ParentIsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.IsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <MultiDataTrigger.Setters>
                                                                        <Setter TargetName="image" Property="Source" Value="{DynamicResource Visible}"/>
                                                                    </MultiDataTrigger.Setters>
                                                                </MultiDataTrigger>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.ParentIsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.IsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <MultiDataTrigger.Setters>
                                                                        <Setter TargetName="image" Property="Opacity" Value="0.0"/>
                                                                    </MultiDataTrigger.Setters>
                                                                </MultiDataTrigger>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.ParentIsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.IsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <MultiDataTrigger.Setters>
                                                                        <Setter TargetName="image" Property="Source" Value="{DynamicResource NotVisible}"/>
                                                                        <Setter TargetName="image" Property="Opacity" Value="0.5"/>
                                                                    </MultiDataTrigger.Setters>
                                                                </MultiDataTrigger>
                                                                
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.ParentIsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                                        <Condition Binding="{Binding Path=DataContext.Visibility.IsVisible, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <MultiDataTrigger.Setters>
                                                                        <Setter TargetName="image" Property="Opacity" Value="0.0"/>
                                                                    </MultiDataTrigger.Setters>
                                                                </MultiDataTrigger>

                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter TargetName="border" Property="Opacity" Value="0.9"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource TextBase}" />
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter TargetName="border" Property="Opacity" Value="1.0"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter TargetName="border" Property="Opacity" Value="0.5" />
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Button.Style>
                                        <!--<Button.Content>
                                            <Image Source="{DynamicResource Visible}"/>
                                        </Button.Content>-->
                                    </Button>

                                    <!--<ToggleButton 
                                        Style="{DynamicResource ToggleVisibility}"
                                        IsChecked="{Binding Path=DataContext.IsVisible, RelativeSource={RelativeSource TemplatedParent}}"
                                        VerticalAlignment="Center">
                                        --><!--<ToggleButton.IsChecked>
                                            <MultiBinding Converter="{StaticResource ComponentVisibility}">
                                                <Binding Path="DataContext.IsVisible" Mode="OneWay" UpdateSourceTrigger="PropertyChanged" RelativeSource="{RelativeSource AncestorLevel=2, AncestorType={x:Type TreeViewItem}}"/>
                                                <Binding Path="DataContext.IsVisible" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </MultiBinding>
                                        </ToggleButton.IsChecked>--><!--
                                    </ToggleButton>-->
                                </Border>
                                
                                <Grid Height="30" Grid.Column="1" Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19" />
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton x:Name="Expander"
                                            Style="{DynamicResource ExpandCollapseToggleStyle}"
                                            IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                            ClickMode="Press"/>
                                    <ContentPresenter x:Name="PART_Header"
                                        Grid.Column="1"
                                        ContentSource="Header"
                                        VerticalAlignment="Stretch"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                </Grid>
                            </DockPanel>
                        </Border>
                        <Border x:Name="presenterBg" Background="Transparent">
                            <ItemsPresenter Grid.Column="1" x:Name="ItemsHost" />
                        </Border>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                        </MultiTrigger>
                        
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Color}"/>
                            <Setter TargetName="PART_Header" Property="TextBlock.Foreground" Value="{DynamicResource ActiveTextBase}"/>
                        </Trigger>

                        <Trigger Property="Controls:MultiSelectTreeView.IsItemSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Color}"/>
                            <Setter TargetName="PART_Header" Property="TextBlock.Foreground" Value="{DynamicResource ActiveTextBase}"/>
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Controls:MultiSelectTreeView.IsItemSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Color}"/>
                            <Setter TargetName="PART_Header" Property="TextBlock.Foreground" Value="{DynamicResource ActiveTextBase}"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>-->
    </Style>

    
</ResourceDictionary>