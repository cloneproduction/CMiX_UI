<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:CMiX.Core.Presentation.Controls">

    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="{DynamicResource Normal}"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="{DynamicResource Normal}"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="{DynamicResource HighLight}"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="{DynamicResource Light}"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="{DynamicResource Light}"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="{DynamicResource HighLight}"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="{DynamicResource Dark}"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="{DynamicResource Dark}"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="{DynamicResource Dark}"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="{DynamicResource HighDarker}"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="{DynamicResource HighDarker}"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="{DynamicResource Light}"/>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
                            Margin="0" 
                            SnapsToDevicePixels="true" 
                            Stroke="Black" 
                            StrokeThickness="1" 
                            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path 
                                    x:Name="arrow" 
                                    Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                    HorizontalAlignment="Center" 
                                    SnapsToDevicePixels="false" 
                                    Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" 
                                    StrokeThickness="2" 
                                    VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter 
                                HorizontalAlignment="Center" 
                                Margin="0,4,0,0" 
                                Grid.Row="1" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True"
                                VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path 
                                    x:Name="arrow" 
                                    Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                    HorizontalAlignment="Center" 
                                    SnapsToDevicePixels="false" 
                                    Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" 
                                    StrokeThickness="2" 
                                    VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                Margin="4,0,0,0" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path 
                                    x:Name="arrow" 
                                    Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                    HorizontalAlignment="Center" 
                                    SnapsToDevicePixels="false" 
                                    Stroke="{DynamicResource Expander.Static.Arrow.Stroke}" 
                                    StrokeThickness="2" 
                                    VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter 
                                HorizontalAlignment="Center" 
                                Margin="0,4,0,0" 
                                Grid.Row="1" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        Height="25"
                        x:Name="mainBorder"
                        CornerRadius="{DynamicResource CornerRadiusDefault}" 
                        Padding="4"
                        Background="{DynamicResource DarkColor}">
                        <Grid 
                            SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path 
                                x:Name="arrow" 
                                Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                HorizontalAlignment="Center" 
                                SnapsToDevicePixels="false" 
                                Stroke="{DynamicResource TextBase}" 
                                StrokeThickness="2" 
                                VerticalAlignment="Center"/>
                            <ContentPresenter 
                                Margin="4, 0"
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            <Setter Property="CornerRadius" TargetName="mainBorder" Value="{DynamicResource CornerRadiusTop}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="mainBorder" Value="{DynamicResource Color}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        x:Name="mainBorder"
                        Height="25"
                        Background="{DynamicResource DarkerColor}" >
                        <Grid 
                            SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path 
                                x:Name="arrow" 
                                Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                HorizontalAlignment="Center" 
                                SnapsToDevicePixels="false" 
                                Stroke="{DynamicResource HighLightColor}" 
                                StrokeThickness="2" 
                                VerticalAlignment="Center"/>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            <Setter Property="CornerRadius" TargetName="mainBorder" Value="{DynamicResource CornerRadiusTop}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerExpanderLevel1DownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        x:Name="mainBorder"
                        Height="25"
                        Background="{DynamicResource DarkerColor}" >
                        <Grid SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path 
                                x:Name="arrow" 
                                Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                HorizontalAlignment="Center" 
                                SnapsToDevicePixels="false" 
                                Stroke="{DynamicResource TextBase}" 
                                StrokeThickness="2" 
                                VerticalAlignment="Center"/>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            <Setter Property="CornerRadius" TargetName="mainBorder" Value="{DynamicResource CornerRadiusTop}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerExpanderLevel2DownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        x:Name="mainBorder"
                        Height="25"
                        Background="{DynamicResource HighDarkerColor}" >
                        <Grid SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path 
                                x:Name="arrow" 
                                Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                HorizontalAlignment="Center" 
                                SnapsToDevicePixels="false" 
                                Stroke="{DynamicResource TextBase}" 
                                StrokeThickness="2" 
                                VerticalAlignment="Center"/>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            <Setter Property="CornerRadius" TargetName="mainBorder" Value="{DynamicResource CornerRadiusTop}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderBase" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border 
                        CornerRadius="{DynamicResource CornerRadiusDefault}"
                        Background="{DynamicResource DarkerColor}"
                        SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton 
                                x:Name="HeaderSite" 
                                ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                Content="{TemplateBinding Header}" 
                                DockPanel.Dock="Top" 
                                Foreground="{DynamicResource TextBase}"
                                FontWeight="{TemplateBinding FontWeight}" 
                                FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}" 
                                FontStyle="{TemplateBinding FontStyle}" 
                                FontStretch="{TemplateBinding FontStretch}" 
                                FontSize="{TemplateBinding FontSize}" 
                                FontFamily="{TemplateBinding FontFamily}" 
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                MinWidth="0" 
                                MinHeight="0" 
                                Padding="4, 0" 
                                Style="{DynamicResource ExpanderDownHeaderStyle}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                />
                            <ContentPresenter 
                                x:Name="ExpandSite" 
                                DockPanel.Dock="Bottom" 
                                Focusable="false" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                Visibility="Collapsed" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseDoubleClicked" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="IsExpanded" Value="True"/>
                            </Trigger>-->
                        </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border 
                        Background="{DynamicResource HighDarkerColor}"
                        SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton 
                                x:Name="HeaderSite" 
                                ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                Content="{TemplateBinding Header}" 
                                DockPanel.Dock="Top" 
                                Foreground="{DynamicResource TextBase}"
                                FontWeight="{TemplateBinding FontWeight}" 
                                FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}" 
                                FontStyle="{TemplateBinding FontStyle}" 
                                FontStretch="{TemplateBinding FontStretch}" 
                                FontSize="{TemplateBinding FontSize}" 
                                FontFamily="{TemplateBinding FontFamily}" 
                                HorizontalContentAlignment="Left" 
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                MinWidth="0" 
                                MinHeight="0" 
                                Padding="{TemplateBinding Padding}" 
                                Style="{DynamicResource InnerExpanderDownHeaderStyle}" 
                                VerticalContentAlignment="Center"/>
                            <ContentPresenter 
                                x:Name="ExpandSite" 
                                DockPanel.Dock="Bottom" 
                                Focusable="false" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                Visibility="Collapsed" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerExpanderLevel1" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource TextBase}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border 
                        Background="{DynamicResource HighHighDarkerColor}"
                        SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton 
                                x:Name="HeaderSite" 
                                ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                Content="{TemplateBinding Header}" 
                                DockPanel.Dock="Top" 
                                Foreground="{DynamicResource TextBase}"
                                FontWeight="{TemplateBinding FontWeight}" 
                                FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}" 
                                FontStyle="{TemplateBinding FontStyle}" 
                                FontStretch="{TemplateBinding FontStretch}" 
                                FontSize="{TemplateBinding FontSize}" 
                                FontFamily="{TemplateBinding FontFamily}" 
                                HorizontalContentAlignment="Left" 
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                MinWidth="0" 
                                MinHeight="0" 
                                Padding="{TemplateBinding Padding}" 
                                Style="{DynamicResource InnerExpanderLevel1DownHeaderStyle}" 
                                VerticalContentAlignment="Center"/>
                            <ContentPresenter 
                                x:Name="ExpandSite" 
                                DockPanel.Dock="Bottom" 
                                Focusable="false" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                Visibility="Collapsed" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InnerExpanderLevel2" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource TextBase}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border 
                        Background="{DynamicResource HighHighDarkerColor}"
                        SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton 
                                x:Name="HeaderSite" 
                                ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                Content="{TemplateBinding Header}" 
                                DockPanel.Dock="Top" 
                                Foreground="{DynamicResource TextBase}"
                                FontWeight="{TemplateBinding FontWeight}" 
                                FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}" 
                                FontStyle="{TemplateBinding FontStyle}" 
                                FontStretch="{TemplateBinding FontStretch}" 
                                FontSize="{TemplateBinding FontSize}" 
                                FontFamily="{TemplateBinding FontFamily}" 
                                HorizontalContentAlignment="Left" 
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                MinWidth="0" 
                                MinHeight="0" 
                                Padding="{TemplateBinding Padding}" 
                                Style="{DynamicResource InnerExpanderLevel2DownHeaderStyle}" 
                                VerticalContentAlignment="Center"/>
                            <ContentPresenter 
                                x:Name="ExpandSite" 
                                DockPanel.Dock="Bottom" 
                                Focusable="false" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                Visibility="Collapsed" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ModifierExpanderToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        x:Name="mainBorder"
                        Height="25"
                        Background="{DynamicResource HighDarkerColor}" >
                        <Grid SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path 
                                x:Name="arrow" 
                                Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                HorizontalAlignment="Center" 
                                SnapsToDevicePixels="false" 
                                Stroke="{DynamicResource HighLightColor}" 
                                StrokeThickness="2" 
                                VerticalAlignment="Center"/>
                            <ContentPresenter 
                                Grid.Column="1" 
                                HorizontalAlignment="Left" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="True" 
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            <Setter Property="CornerRadius" TargetName="mainBorder" Value="{DynamicResource CornerRadiusTop}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModifierCloseButtonStyle" TargetType="{x:Type Button}">
        <!--<EventSetter Event="Click" Handler="CloseClick"/>-->
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Background" Value="{DynamicResource DarkColor}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBase}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        CornerRadius="0, 4, 0, 0"
                        SnapsToDevicePixels="True" Padding="8">
                        <Image x:Name="image" Source="{DynamicResource CloseTab}" Opacity="0.50"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="image" Property="Opacity" Value="0.75"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="image" Property="Opacity" Value="1.0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ModifierExpanderTemplate" TargetType="{x:Type Expander}">
        <Border 
            CornerRadius="4"
            Background="{DynamicResource HighDarkerColor}"
            SnapsToDevicePixels="true">
            <DockPanel>

                <DockPanel DockPanel.Dock="Top">
                    <Button 
                        DockPanel.Dock="Right" 
                        Height="25" 
                        Width="25"
                        Command="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Path=DataContext.RemoveTransformModifierCommand}"
                        CommandParameter="{Binding}"
                        Style="{DynamicResource ModifierCloseButtonStyle}"/>
                    <ToggleButton 
                        x:Name="HeaderSite" 
                        DockPanel.Dock="Left"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}" 
                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                        Foreground="{DynamicResource TextBase}"
                        HorizontalContentAlignment="Left" 
                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                        MinWidth="0" 
                        MinHeight="0" 
                        Style="{DynamicResource ModifierExpanderToggleStyle}" />
                </DockPanel>

                <Border x:Name="PresenterBorder"
                    BorderBrush="{DynamicResource DarkColor}"
                    DockPanel.Dock="Top">
                    <ContentPresenter 
                        x:Name="ExpandSite" 
                        DockPanel.Dock="Bottom" 
                        Focusable="false" 
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                        Margin="{TemplateBinding Padding}" 
                        Visibility="Collapsed" 
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                <Setter Property="BorderThickness" TargetName="PresenterBorder" Value="0, 1, 0, 0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    
    
</ResourceDictionary>